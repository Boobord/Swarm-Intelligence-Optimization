
max1= [0,0,0]
import numpy

for a in range (1,40):
    for b in numpy.arange(0,10,0.1):
        print("c and Gamma are:",a,b)

        equation_inputs = [a,b]
        # Number of the weights we are looking to optimize.
        num_weights = 2
        sol_per_pop = 8
        # Defining the population size.
        pop_size = (sol_per_pop,num_weights) # The population will have sol_per_pop chromosome where each chromosome has num_weights genes.
        #Creating the initial population.
    
        new_population = numpy.random.uniform(low=-4.0, high=4.0, size=pop_size)


        def cal_pop_fitness(equation_inputs, pop):
           # Calculating the fitness value of each solution in the current population.
           # The fitness function calculates the sum of products between each input and its corresponding weight.
            fitness = numpy.sum(pop*equation_inputs, axis=1)
            print (pop)
            return fitness


        def select_mating_pool(pop, fitness, num_parents):
            # Selecting the best individuals in the current generation as parents for producing the offspring of the next generation.
            parents = numpy.empty((num_parents, pop.shape[1]))
            for parent_num in range(num_parents):
                max_fitness_idx = numpy.where(fitness == numpy.max(fitness))
                max_fitness_idx = max_fitness_idx[0][0]
                parents[parent_num, :] = pop[max_fitness_idx, :]
                fitness[max_fitness_idx] = -99999999999
            return parents


        def crossover(parents, offspring_size):
            offspring = numpy.empty(offspring_size)
            # The point at which crossover takes place between two parents. Usually, it is at the center.
            crossover_point = numpy.uint8(offspring_size[1]/2)

            for k in range(offspring_size[0]):
                # Index of the first parent to mate.
                parent1_idx = k%parents.shape[0]
                # Index of the second parent to mate.
                parent2_idx = (k+1)%parents.shape[0]
                # The new offspring will have its first half of its genes taken from the first parent.
                offspring[k, 0:crossover_point] = parents[parent1_idx, 0:crossover_point]
                # The new offspring will have its second half of its genes taken from the second parent.
                offspring[k, crossover_point:] = parents[parent2_idx, crossover_point:]
            return offspring   

        num_generations = 5
        num_parents_mating = 4

        for generation in range(num_generations):
                
            # Measuring the fitness of each chromosome in the population.
            fitness = cal_pop_fitness(equation_inputs, new_population)

            # Selecting the best parents in the population for mating.
            parents = select_mating_pool(new_population, fitness,num_parents_mating)

            # Generating next generation using crossover.
            offspring_crossover = crossover(parents,offspring_size=(pop_size[0]-parents.shape[0], num_weights))

        def mutation(offspring_crossover):
            # Mutation changes a single gene in each offspring randomly.
                for idx in range(offspring_crossover.shape[0]):
                    # The random value to be added to the gene.
                    random_value = numpy.random.uniform(-1.0, 1.0, 1)
                    offspring_crossover[idx, 4] = offspring_crossover[idx, 4] + random_value      

                    # Adding some variations to the offsrping using mutation.
                    offspring_mutation = mutation(offspring_crossover)

                    # Creating the new population based on the parents and offspring.
                    new_population[0:parents.shape[0], :] = parents
                    new_population[parents.shape[0]:, :] = offspring_mutation   


        # The best result in the current iteration.
        #print("Best result : ", numpy.max(numpy.sum(new_population*equation_inputs, axis=1)))

        # Getting the best solution after iterating finishing all generations.
        #At first, the fitness is calculated for each solution in the final generation.
        fitness = cal_pop_fitness(equation_inputs, new_population)

        # Then return the index of that solution corresponding to the best fitness.
        best_match_idx = numpy.where(fitness == numpy.max(fitness))

        print("Best solution : ", new_population[best_match_idx, :])
        print("Best solution fitness : ", fitness[best_match_idx])   

        from sklearn import datasets 
        import pandas as pd  
        import numpy as np  
        import matplotlib.pyplot as plt  
        %matplotlib inline
        
        from sklearn import datasets
        iris= datasets.load_iris()
        
        data = pd.read_excel('C:\\Users\DELL\Desktop\code Geneticsvm1\svmgenetic_kamel\sample 5000 numeric normal data - Copy.xlsx')  
      
        x = data.drop('Class', axis=1)  
        y = data['Class']
    
        from sklearn.metrics import classification_report, confusion_matrix 
        from sklearn.svm import SVC   
        from sklearn.model_selection import KFold
        #strat to kfold
        kf = KFold(n_splits = 5, shuffle = True)
        kf_svclassifier = SVC(C=abs(new_population[best_match_idx, 0]),gamma=abs(new_population[best_match_idx, 1]),kernel='rbf')  
       
        scores = []
        for i in range(5):
            result = next(kf.split(x), None)
            x_train = x.iloc[result[0]]
            x_test = x.iloc[result[1]]
            y_train = y.iloc[result[0]]
            y_test = y.iloc[result[1]]
            model = kf_svclassifier.fit(x_train,y_train)
            predictions = kf_svclassifier.predict(x_test)
            scores.append(model.score(x_test,y_test))
            print(confusion_matrix(y_test,predictions))
            print(classification_report(y_test,predictions))
        print('Scores from each Iteration: ', scores)
        #average of k folds
        Accuracy = np.mean(scores)
        print('Average K-Fold Score :' , np.mean(scores))
         
        import pandas as pd
        import numpy as np        
        new_population1= new_population
        store_sol = np.delete(new_population1, [1, 2, 3, 4, 5, 6, 7], axis=0)        
        store_sol1 =abs(numpy.append(store_sol,Accuracy ))
      
        #print("store_sol1 :", store_sol1)          
        #print("store_sol1 :", store_sol1[2]) 
        #print(max1[2])
        
        if store_sol1[2]>max1[2]:
            max1=store_sol1
                        
print("optimal parameters c, Gamma and acurracy:", max1)

        
    
